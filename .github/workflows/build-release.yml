name: Build and Release Electron App

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type (major, minor, patch, premajor, preminor, prepatch, prerelease)"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease
      prerelease_id:
        description: "Prerelease identifier (e.g., alpha, beta, rc)"
        required: false
        type: string
        default: "alpha"

permissions:
  contents: write

jobs:
  update_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.update_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Update version
        id: update_version
        run: |
          if [[ "${{ github.event.inputs.release_type }}" == pre* ]]; then
            npm version ${{ github.event.inputs.release_type }} --preid=${{ github.event.inputs.prerelease_id }} --no-git-tag-version
          else
            npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          fi
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: update_version
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
            ~/.cache/electron
            ~/.cache/electron-builder
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
      - name: Install dependencies
        run: task install

      - name: Build Next.js and Electron projects
        run: task build

      - name: Debug OS
        run: echo "Current OS is ${{ matrix.os }}"
        shell: bash

      - name: Build Electron installers for Linux
        if: startsWith(matrix.os, 'ubuntu')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo snap install snapcraft --classic
          task release:linux

      - name: Build Electron installers for Windows
        if: startsWith(matrix.os, 'windows')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: task release:win

      - name: Build Electron installers for macOS
        if: startsWith(matrix.os, 'macos')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: task release:mac

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installers-${{ matrix.os }}
          path: |
            dist/*.deb
            dist/*.rpm
            dist/*.exe
            dist/*.dmg

  release:
    needs: [update_version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: installers

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        run: |
          echo "# Release v${{ needs.update_version.outputs.new_version }}" > RELEASE_NOTES.md
          echo "Automated release for version ${{ needs.update_version.outputs.new_version }}" >> RELEASE_NOTES.md
          echo "## Included installers" >> RELEASE_NOTES.md
          find installers -type f | sed 's/^/* /' >> RELEASE_NOTES.md

      - name: Generate changelog
        run: task changelog

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            installers/**/*.deb
            installers/**/*.rpm
            installers/**/*.exe
            installers/**/*.dmg
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ startsWith(github.event.inputs.release_type, 'pre') }}
          tag_name: v${{ needs.update_version.outputs.new_version }}

  update-changelog:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update changelog
        run: task changelog

      - name: Commit changelog
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Update changelog for v${{ needs.update_version.outputs.new_version }}
          file_pattern: "CHANGELOG.md"
          commit_user_name: GitHub Action
          commit_user_email: actions@github.com

      - uses: stefanzweifel/git-auto-commit-action@v5
