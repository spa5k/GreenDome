name: Build and Release Electron App

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type (major, minor, patch, premajor, preminor, prepatch, prerelease)"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease
      prerelease_id:
        description: "Prerelease identifier (e.g., alpha, beta, rc)"
        required: false
        type: string
        default: "alpha"

permissions:
  contents: write

jobs:
  update_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.update_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Update version
        id: update_version
        run: |
          if [[ "${{ github.event.inputs.release_type }}" == pre* ]]; then
            npm version ${{ github.event.inputs.release_type }} --preid=${{ github.event.inputs.prerelease_id }} --no-git-tag-version
          else
            npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          fi
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: update_version
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
            ~/.cache/electron
            ~/.cache/electron-builder
            node_modules
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: task install

      - name: Add the updated version to package.json
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        run: |
          VERSION=$(echo ${{ needs.update_version.outputs.new_version }} | sed 's/v//')
          pnpm dlx json -I -f package.json -e "this.version = \"$VERSION\""

      - name: Add the updated version to package.json (Windows)
        if: startsWith(matrix.os, 'windows')
        env:
          VERSION: ${{ needs.update_version.outputs.new_version }}
        run: |
          $VERSION = $env:VERSION -replace '^v',''
          (Get-Content package.json) -replace '"version": ".*"', "`"version`": `"$VERSION`"" | Set-Content package.json

      - name: Build Next.js and Electron projects
        run: task build

      - name: Build Electron installers for Linux
        if: startsWith(matrix.os, 'ubuntu')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm
          sudo gem install fpm
          task release:linux

      - name: Build Electron installers for Windows
        if: startsWith(matrix.os, 'windows')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: task release:win

      - name: Build Electron installers for macOS
        if: startsWith(matrix.os, 'macos')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: task release:mac

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installers-${{ matrix.os }}
          path: |
            dist/*.deb
            dist/*.rpm
            dist/*.AppImage
            dist/*.snap
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.yml
            dist/*.yaml
            dist/*.json
          if-no-files-found: error

  release:
    needs: [update_version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: installers

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog
        run: task changelog

      - name: Get version
        run: |
          VERSION=$(echo ${{ needs.update_version.outputs.new_version }} | sed 's/v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if version already exists in tags
        run: |
          echo "VERSION_HASH=$(git rev-parse -q --verify 'refs/tags/${{ env.VERSION }}')" >> $GITHUB_ENV
          echo "CHANGELOG_ANCHOR=$(echo $VERSION | sed -e 's/\.//g')" >> $GITHUB_ENV

      - name: Fetch draft release
        if: ${{ env.VERSION_HASH == '' }}
        uses: cardinalby/git-get-release-action@v1
        id: get_draft_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          latest: true
          draft: true
          searchLimit: 1

      - name: Publish Release (if it does not exist)
        if: ${{ env.VERSION_HASH == '' }}
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GH_TOKEN }}
          id: ${{ steps.get_draft_release.outputs.id }}
          draft: false
          prerelease: false
          replacename: true
          name: ${{ env.VERSION }}
          replacebody: true
          body: |
            See [changelog](https://github.com/spa5k/siraat/blob/main/changelog.md#${{ env.CHANGELOG_ANCHOR }}) for the list of updates and the full diff.

            Thanks to all contributors! üèÖ

            (Note for Windows: `siraat-Web-Setup-${{ env.VERSION }}.exe` is an installer, and `siraat-${{ env.VERSION }}.exe` is a portable version)

      - name: Update changelog
        if: ${{ env.VERSION_HASH == '' }}
        run: task changelog

      - name: Commit changelog
        if: ${{ env.VERSION_HASH == '' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Update changelog for ${{ env.VERSION }}
          file_pattern: "changelog.md"
          commit_user_name: "GitHub Action"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Action <actions@github.com>"
